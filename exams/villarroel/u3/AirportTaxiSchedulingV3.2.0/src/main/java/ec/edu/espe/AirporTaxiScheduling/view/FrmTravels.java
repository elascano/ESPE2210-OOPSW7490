package ec.edu.espe.AirporTaxiScheduling.view;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import ec.edu.espe.AirporTaxiScheduling.controller.TarifDbController;
import ec.edu.espe.AirporTaxiScheduling.controller.TraveldbController;
import ec.edu.espe.AirporTaxiScheduling.utils.FileManager;
import ec.edu.espe.AirporTaxiScheduling.controller.TaxiDriverdbController;
import ec.edu.espe.AirporTaxiScheduling.controller.TravelerdbController;
import ec.edu.espe.AirporTaxiScheduling.model.Payment;
import ec.edu.espe.AirporTaxiScheduling.controller.SubscribedTraveler;
import ec.edu.espe.AirporTaxiScheduling.model.Tarif;
import ec.edu.espe.AirporTaxiScheduling.model.TaxiDriver;
import ec.edu.espe.AirporTaxiScheduling.model.Travel;
import ec.edu.espe.AirporTaxiScheduling.model.Traveler;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
import ec.edu.espe.AirporTaxiScheduling.utils.Generator;
import java.util.Collections;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Leonardo Yaranga,Progress Team, DCCO-ESPE
 */
public class FrmTravels extends javax.swing.JFrame {

          /**
           * Creates new form FrmTravels
           */
          ArrayList<Travel> travels = new ArrayList<Travel>();
          Travel travel = new Travel();
          TraveldbController dataBaseManager = new TraveldbController();
          Traveler traveler = new Traveler();
          ArrayList<TaxiDriver> taxiDrivers = new ArrayList<TaxiDriver>();
          TaxiDriver taxiDriver = new TaxiDriver();
          ArrayList<Traveler> travelers = new ArrayList<Traveler>();

          
          String collectionName = "Travels";

          boolean travelerPayed;

          public FrmTravels() {
                    initComponents();
                    loadDriverCombo();
                    loadTravelerCombo();
                    loadTarifs();
          }

          /**
           * This method is called from within the constructor to initialize the
           * form. WARNING: Do NOT modify this code. The content of this method
           * is always regenerated by the Form Editor.
           */
          @SuppressWarnings("unchecked")
          // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
          private void initComponents() {

                    btngPayed = new javax.swing.ButtonGroup();
                    jCalendarTheme1 = new com.toedter.plaf.JCalendarTheme();
                    pnlInput = new javax.swing.JPanel();
                    jLabel1 = new javax.swing.JLabel();
                    jLabel2 = new javax.swing.JLabel();
                    jLabel3 = new javax.swing.JLabel();
                    txtAddress = new javax.swing.JTextField();
                    cmbDriver = new javax.swing.JComboBox<>();
                    cmbTraveler = new javax.swing.JComboBox<>();
                    jLabel4 = new javax.swing.JLabel();
                    jLabel5 = new javax.swing.JLabel();
                    jLabel6 = new javax.swing.JLabel();
                    txtPnlAnnotation = new javax.swing.JScrollPane();
                    txtaAnnotation = new javax.swing.JTextArea();
                    chkbAnnotation = new javax.swing.JCheckBox();
                    rbtnPayed = new javax.swing.JRadioButton();
                    rbtnNoPayed = new javax.swing.JRadioButton();
                    jdtechDateofOcurrence = new com.toedter.calendar.JSpinnerDateEditor();
                    jScrollPane3 = new javax.swing.JScrollPane();
                    jtblTravels = new javax.swing.JTable();
                    btnWiewTravels = new javax.swing.JButton();
                    lblid = new javax.swing.JLabel();
                    lblPrice = new javax.swing.JLabel();
                    jLabel7 = new javax.swing.JLabel();
                    jScrollPane2 = new javax.swing.JScrollPane();
                    jtblTarifs = new javax.swing.JTable();
                    lblDriver = new javax.swing.JLabel();
                    lblTraveler = new javax.swing.JLabel();
                    lblDateOfOcurrence = new javax.swing.JLabel();
                    btnSetDate = new javax.swing.JButton();
                    btnBack = new javax.swing.JButton();
                    btnUpdate = new javax.swing.JButton();
                    btnAccept = new javax.swing.JButton();
                    btnDelete = new javax.swing.JButton();
                    btnClean = new javax.swing.JButton();
                    btShowTarifs = new javax.swing.JButton();
                    chkbPayment = new javax.swing.JCheckBox();

                    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                    setResizable(false);

                    jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
                    jLabel1.setText("VIAJES");

                    jLabel2.setText("Conductor");

                    jLabel3.setText("Pasajero");

                    txtAddress.setToolTipText("Ingrese la direccion de destino");
                    txtAddress.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        txtAddressActionPerformed(evt);
                              }
                    });
                    txtAddress.addKeyListener(new java.awt.event.KeyAdapter() {
                              public void keyTyped(java.awt.event.KeyEvent evt) {
                                        txtAddressKeyTyped(evt);
                              }
                    });

                    cmbDriver.setToolTipText("Seleccione al conductor");
                    cmbDriver.addMouseListener(new java.awt.event.MouseAdapter() {
                              public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        cmbDriverMouseClicked(evt);
                              }
                    });
                    cmbDriver.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        cmbDriverActionPerformed(evt);
                              }
                    });

                    cmbTraveler.setToolTipText("Seleccione al pasaero");
                    cmbTraveler.setFocusCycleRoot(true);
                    cmbTraveler.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        cmbTravelerActionPerformed(evt);
                              }
                    });

                    jLabel4.setText("Direccion");

                    jLabel5.setText("Fecha de Aparicion");

                    jLabel6.setText("Presio:");

                    txtaAnnotation.setColumns(20);
                    txtaAnnotation.setRows(5);
                    txtaAnnotation.setToolTipText("Ingrese una anotacion");
                    txtaAnnotation.setEnabled(false);
                    txtaAnnotation.addKeyListener(new java.awt.event.KeyAdapter() {
                              public void keyTyped(java.awt.event.KeyEvent evt) {
                                        txtaAnnotationKeyTyped(evt);
                              }
                    });
                    txtPnlAnnotation.setViewportView(txtaAnnotation);

                    chkbAnnotation.setText("Incluir Anotacion");
                    chkbAnnotation.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        chkbAnnotationActionPerformed(evt);
                              }
                    });

                    btngPayed.add(rbtnPayed);
                    rbtnPayed.setText("Pagado");

                    btngPayed.add(rbtnNoPayed);
                    rbtnNoPayed.setText("No pagado");

                    jdtechDateofOcurrence.setModel(new javax.swing.SpinnerDateModel());
                    jdtechDateofOcurrence.setToolTipText("Fecha");
                    jdtechDateofOcurrence.addChangeListener(new javax.swing.event.ChangeListener() {
                              public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                        jdtechDateofOcurrenceStateChanged(evt);
                              }
                    });
                    jdtechDateofOcurrence.addMouseListener(new java.awt.event.MouseAdapter() {
                              public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        jdtechDateofOcurrenceMouseClicked(evt);
                              }
                    });
                    jdtechDateofOcurrence.addKeyListener(new java.awt.event.KeyAdapter() {
                              public void keyPressed(java.awt.event.KeyEvent evt) {
                                        jdtechDateofOcurrenceKeyPressed(evt);
                              }
                    });

                    jtblTravels.setModel(new javax.swing.table.DefaultTableModel(
                              new Object [][] {

                              },
                              new String [] {
                                        "Id", "Conductor", "Pasajero", "Direccion", "Fecha", "Precio", "Pagado"
                              }
                    ));
                    jtblTravels.addMouseListener(new java.awt.event.MouseAdapter() {
                              public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        jtblTravelsMouseClicked(evt);
                              }
                    });
                    jScrollPane3.setViewportView(jtblTravels);

                    btnWiewTravels.setText("Ver las carreras existentes");
                    btnWiewTravels.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        btnWiewTravelsActionPerformed(evt);
                              }
                    });

                    jLabel7.setText("Id:");
                    jLabel7.addContainerListener(new java.awt.event.ContainerAdapter() {
                              public void componentAdded(java.awt.event.ContainerEvent evt) {
                                        jLabel7ComponentAdded(evt);
                              }
                    });

                    jtblTarifs.setModel(new javax.swing.table.DefaultTableModel(
                              new Object [][] {

                              },
                              new String [] {
                                        "Destino", "Lugar de partida", "Tarifa"
                              }
                    ) {
                              Class[] types = new Class [] {
                                        java.lang.String.class, java.lang.String.class, java.lang.Float.class
                              };

                              public Class getColumnClass(int columnIndex) {
                                        return types [columnIndex];
                              }
                    });
                    jtblTarifs.addMouseListener(new java.awt.event.MouseAdapter() {
                              public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        jtblTarifsMouseClicked(evt);
                              }
                    });
                    jScrollPane2.setViewportView(jtblTarifs);

                    btnSetDate.setText("Establecer Fecha");
                    btnSetDate.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        btnSetDateActionPerformed(evt);
                              }
                    });

                    btnBack.setText("<REGRESAR");
                    btnBack.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        btnBackActionPerformed(evt);
                              }
                    });

                    btnUpdate.setText("ACTUALIZAR");
                    btnUpdate.setEnabled(false);
                    btnUpdate.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        btnUpdateActionPerformed(evt);
                              }
                    });

                    btnAccept.setText("ACEPTAR");
                    btnAccept.setEnabled(false);
                    btnAccept.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        btnAcceptActionPerformed(evt);
                              }
                    });

                    btnDelete.setText("ELIMINAR");
                    btnDelete.setEnabled(false);
                    btnDelete.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        btnDeleteActionPerformed(evt);
                              }
                    });

                    btnClean.setText("LIMPIAR");
                    btnClean.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        btnCleanActionPerformed(evt);
                              }
                    });

                    btShowTarifs.setText("Mostrar Tarifas");
                    btShowTarifs.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        btShowTarifsActionPerformed(evt);
                              }
                    });

                    chkbPayment.setText("Recordatorio");
                    chkbPayment.addActionListener(new java.awt.event.ActionListener() {
                              public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        chkbPaymentActionPerformed(evt);
                              }
                    });

                    javax.swing.GroupLayout pnlInputLayout = new javax.swing.GroupLayout(pnlInput);
                    pnlInput.setLayout(pnlInputLayout);
                    pnlInputLayout.setHorizontalGroup(
                              pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(pnlInputLayout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                  .addGroup(pnlInputLayout.createSequentialGroup()
                                                            .addComponent(jLabel2)
                                                            .addGap(18, 18, 18)
                                                            .addComponent(cmbDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(18, 18, 18)
                                                            .addComponent(lblDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(0, 0, Short.MAX_VALUE))
                                                  .addGroup(pnlInputLayout.createSequentialGroup()
                                                            .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                      .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlInputLayout.createSequentialGroup()
                                                                                .addComponent(jLabel3)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(cmbTraveler, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(lblTraveler, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addGap(12, 12, 12))
                                                                      .addGroup(pnlInputLayout.createSequentialGroup()
                                                                                .addComponent(btnBack)
                                                                                .addGap(96, 96, 96)
                                                                                .addComponent(jLabel1)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(jLabel7)))
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(lblid, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(93, 93, 93))))
                              .addGroup(pnlInputLayout.createSequentialGroup()
                                        .addGap(211, 211, 211)
                                        .addComponent(rbtnPayed)
                                        .addGap(29, 29, 29)
                                        .addComponent(rbtnNoPayed)
                                        .addGap(37, 37, 37)
                                        .addComponent(chkbPayment)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                              .addGroup(pnlInputLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                  .addGroup(pnlInputLayout.createSequentialGroup()
                                                            .addGap(20, 20, 20)
                                                            .addComponent(jLabel4)
                                                            .addGap(18, 18, 18)
                                                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                  .addGroup(pnlInputLayout.createSequentialGroup()
                                                            .addGap(8, 8, 8)
                                                            .addComponent(jLabel5)
                                                            .addGap(41, 41, 41)
                                                            .addComponent(jdtechDateofOcurrence, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(40, 40, 40)
                                                            .addComponent(btnSetDate)
                                                            .addGap(18, 18, 18)
                                                            .addComponent(lblDateOfOcurrence, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                  .addGroup(pnlInputLayout.createSequentialGroup()
                                                            .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                      .addGroup(pnlInputLayout.createSequentialGroup()
                                                                                .addComponent(chkbAnnotation)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(txtPnlAnnotation, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                      .addGroup(pnlInputLayout.createSequentialGroup()
                                                                                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                          .addGroup(pnlInputLayout.createSequentialGroup()
                                                                                                    .addComponent(jLabel6)
                                                                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                    .addGap(38, 38, 38))
                                                                                          .addGroup(pnlInputLayout.createSequentialGroup()
                                                                                                    .addComponent(btShowTarifs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                                    .addGap(31, 31, 31)))
                                                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                                            .addGap(18, 18, 18)
                                                            .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                      .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                                                      .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                      .addComponent(btnAccept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                  .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInputLayout.createSequentialGroup()
                                                            .addComponent(btnWiewTravels, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(btnClean, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                  .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 699, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))
                    );
                    pnlInputLayout.setVerticalGroup(
                              pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(pnlInputLayout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                  .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(jLabel1)
                                                            .addComponent(jLabel7)
                                                            .addComponent(btnBack))
                                                  .addComponent(lblid, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(35, 35, 35)
                                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                  .addComponent(lblDriver, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                  .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(jLabel2)
                                                            .addComponent(cmbDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(30, 30, 30)
                                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                  .addComponent(lblTraveler, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                  .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(jLabel3)
                                                            .addComponent(cmbTraveler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(26, 26, 26)
                                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                  .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                  .addComponent(jLabel4))
                                        .addGap(21, 21, 21)
                                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                  .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(jLabel5)
                                                            .addComponent(jdtechDateofOcurrence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(btnSetDate))
                                                  .addComponent(lblDateOfOcurrence, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                  .addGroup(pnlInputLayout.createSequentialGroup()
                                                            .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                      .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                      .addGroup(pnlInputLayout.createSequentialGroup()
                                                                                .addComponent(btShowTarifs)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                          .addComponent(jLabel6)
                                                                                          .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                .addGap(34, 34, 34)))
                                                            .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                      .addGroup(pnlInputLayout.createSequentialGroup()
                                                                                .addGap(30, 30, 30)
                                                                                .addComponent(chkbAnnotation))
                                                                      .addGroup(pnlInputLayout.createSequentialGroup()
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(txtPnlAnnotation, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                                  .addGroup(pnlInputLayout.createSequentialGroup()
                                                            .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(45, 45, 45)
                                                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(38, 38, 38)
                                                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(4, 4, 4)))
                                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                  .addComponent(rbtnPayed)
                                                  .addComponent(rbtnNoPayed, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                  .addComponent(chkbPayment))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                        .addGroup(pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                  .addComponent(btnWiewTravels, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                  .addComponent(btnClean, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap())
                    );

                    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                    getContentPane().setLayout(layout);
                    layout.setHorizontalGroup(
                              layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(pnlInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addContainerGap())
                    );
                    layout.setVerticalGroup(
                              layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(pnlInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    );

                    pack();
                    setLocationRelativeTo(null);
          }// </editor-fold>//GEN-END:initComponents

          private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
                    cleanForm();
          }//GEN-LAST:event_btnCleanActionPerformed

          private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
                    int option = JOptionPane.showConfirmDialog(this, "Esta seguro de eso?");
                    if (option == 0) {
                              TraveldbController.deleteOne(dataBaseManager.getDatabase(), collectionName, Integer.parseInt(lblid.getText()));
                              JOptionPane.showMessageDialog(null, "Viaje eliminado Exitosamente");
                              cleanForm();
                    }
          }//GEN-LAST:event_btnDeleteActionPerformed

          private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed

                    int option = JOptionPane.showConfirmDialog(this, "Do you want to continue?");
                    if (option == 0) {
                       
                              if (cmbDriver.getSelectedItem() == null
                                      || cmbTraveler.getSelectedItem() == null
                                      || txtAddress.getText().isEmpty()
                                      || jdtechDateofOcurrence.getDate() == null
                                      || lblPrice.getText().isEmpty()
                                      || !btngPayed.isSelected(btngPayed.getSelection())|| ((rbtnPayed.isSelected() == false) && (rbtnNoPayed.isSelected() == false))) {
                                        JOptionPane.showMessageDialog(null, "Error, algunos campos estan vacios ");
                              } else {
                                        int idTraveler;
                                        Traveler traveler1 = new Traveler();
                                        idTraveler = Generator.obtainIdTraveler(cmbTraveler.getSelectedItem().toString());
                                        traveler1 = TravelerdbController.findDocumentdb(traveler, idTraveler);
                                        dataBaseManager = TraveldbController.connectToDatabase( dataBaseManager);
                                        TraveldbController.load(travels, dataBaseManager.getDatabase(), collectionName);
                                        travel = new Travel(Generator.generateId(), cmbDriver.getSelectedItem().toString(), idTraveler, cmbTraveler.getSelectedItem().toString(), txtAddress.getText(), jdtechDateofOcurrence.getDate(), Float.parseFloat(lblPrice.getText()), txtaAnnotation.getText(), btngPayed.isSelected(rbtnPayed.getModel()));
                                      
                                        if (chkbPayment.isSelected()) {
                                            Payment payment =new Payment();
                                            SubscribedTraveler subscribedTraveler=new SubscribedTraveler(traveler1.getName(), traveler1.getMail());
                                           payment.addSubsTraveler(subscribedTraveler); 
                                           payment.setTravelPrice(travel.getPrice());
                                           payment.setPayed(travel.isPayed());
                        }
                                        
                                        if (travel.isPayed() == false) {
                                                  traveler1.setOutstandingBalance(travel.getPrice() + traveler1.getOutstandingBalance());
                                                  TravelerdbController.updateDocumentdb(traveler1, idTraveler);
                                                  TraveldbController.createOne(travel, dataBaseManager.getDatabase(), "UncollectedTravels");                                                 
                                        }

                                        
                                        travels.add(travel);
                                        FileManager.addTravelsToJson(travels);
                                        TraveldbController.createOne(travel, dataBaseManager.getDatabase(), collectionName);

                                        if (travel.isPayed()) {

                                        }

                              }
                    }
          }//GEN-LAST:event_btnAcceptActionPerformed

          private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
                    updateTravel();
          }//GEN-LAST:event_btnUpdateActionPerformed

          private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
                    // TODO add your handling code here:
                    AirportTaxiScheduling airportTaxiScheduling;
                    airportTaxiScheduling = new AirportTaxiScheduling();
                    this.setVisible(false);
                    airportTaxiScheduling.setVisible(true);
          }//GEN-LAST:event_btnBackActionPerformed

          private void btnSetDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetDateActionPerformed
                    if (jdtechDateofOcurrence.getDate() == null) {
                              JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna fecha");
                    } else {
                              lblDateOfOcurrence.setText(jdtechDateofOcurrence.getDate().toString());
                    }
          }//GEN-LAST:event_btnSetDateActionPerformed

          private void jtblTarifsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblTarifsMouseClicked
                    int row = jtblTarifs.rowAtPoint(evt.getPoint());
                    lblPrice.setText(jtblTarifs.getValueAt(row, 2).toString());
          }//GEN-LAST:event_jtblTarifsMouseClicked

          private void jLabel7ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jLabel7ComponentAdded

          }//GEN-LAST:event_jLabel7ComponentAdded

          private void btnWiewTravelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWiewTravelsActionPerformed
                    viewTravels();
                    TableRowSorter<TableModel> sorter = new TableRowSorter<>(jtblTravels.getModel());
                    sorter.setSortKeys(Collections.singletonList(new RowSorter.SortKey(1, SortOrder.DESCENDING)));
                    jtblTravels.setRowSorter(sorter);
                    jtblTravels.repaint();
          }//GEN-LAST:event_btnWiewTravelsActionPerformed

          private void jtblTravelsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblTravelsMouseClicked
                    int row = jtblTravels.rowAtPoint(evt.getPoint());
                    lblid.setText(jtblTravels.getValueAt(row, 0).toString());
                    lblDriver.setText(jtblTravels.getValueAt(row, 1).toString());
                    lblTraveler.setText(jtblTravels.getValueAt(row, 2).toString());
                    txtAddress.setText(jtblTravels.getValueAt(row, 3).toString());
                    lblPrice.setText(jtblTravels.getValueAt(row, 5).toString());
                    txtaAnnotation.setText(jtblTravels.getValueAt(row, 7).toString());

                    String payed = jtblTravels.getValueAt(row, 6).toString();
                    if (payed.equals("true")) {
                              btngPayed.setSelected(rbtnPayed.getModel(), true);
                              travelerPayed = true;
                    } else {
                              btngPayed.setSelected(rbtnNoPayed.getModel(), true);
                              travelerPayed = false;
                    }
                    btnUpdate.setEnabled(true);
                    btnDelete.setEnabled(true);
                    TableRowSorter<TableModel> sorter = new TableRowSorter<>(jtblTravels.getModel());
                    sorter.setSortKeys(Collections.singletonList(new RowSorter.SortKey(1, SortOrder.DESCENDING)));
                    jtblTravels.setRowSorter(sorter);
                    jtblTravels.repaint();
          }//GEN-LAST:event_jtblTravelsMouseClicked

          private void jdtechDateofOcurrenceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jdtechDateofOcurrenceKeyPressed

          }//GEN-LAST:event_jdtechDateofOcurrenceKeyPressed

          private void jdtechDateofOcurrenceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jdtechDateofOcurrenceMouseClicked

          }//GEN-LAST:event_jdtechDateofOcurrenceMouseClicked

          private void jdtechDateofOcurrenceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jdtechDateofOcurrenceStateChanged

          }//GEN-LAST:event_jdtechDateofOcurrenceStateChanged

          private void chkbAnnotationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkbAnnotationActionPerformed
                    if (chkbAnnotation.isSelected()) {

                              txtaAnnotation = new javax.swing.JTextArea();

                              txtaAnnotation.setColumns(20);

                              txtaAnnotation.setRows(5);

                              txtPnlAnnotation.setEnabled(true);

                              txtaAnnotation.addKeyListener(new java.awt.event.KeyAdapter() {
                                        public void keyTyped(java.awt.event.KeyEvent evt) {

                                        }
                              });

                              txtPnlAnnotation.setViewportView(txtaAnnotation);
                    } else {
                              txtPnlAnnotation.setEnabled(false);
                    }
          }//GEN-LAST:event_chkbAnnotationActionPerformed

          private void txtaAnnotationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtaAnnotationKeyTyped

          }//GEN-LAST:event_txtaAnnotationKeyTyped

          private void cmbTravelerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTravelerActionPerformed

                    lblTraveler.setText(cmbTraveler.getSelectedItem().toString());
          }//GEN-LAST:event_cmbTravelerActionPerformed

          private void cmbDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDriverActionPerformed
                    if (cmbDriver.getSelectedItem() != null) {
                              lblDriver.setText(cmbDriver.getSelectedItem().toString());
                    } else {
                              JOptionPane.showMessageDialog(null, "Error");
                    }
          }//GEN-LAST:event_cmbDriverActionPerformed

          private void cmbDriverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbDriverMouseClicked

          }//GEN-LAST:event_cmbDriverMouseClicked

          private void txtAddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAddressKeyTyped
                    // TODO validate if it not a char
                    char character = evt.getKeyChar();

                    if (txtAddress.getText() != null) {
                              btnAccept.setEnabled(true);
                    }

                    if (!(Character.isDigit(character)) && !(Character.isAlphabetic(character)) && (character != KeyEvent.VK_BACK_SPACE) && (character != KeyEvent.VK_DELETE) && (character != KeyEvent.VK_SPACE) && !(Character.isDigit(character)) && !(character != KeyEvent.VK_ENTER)) {
                              JOptionPane.showMessageDialog(this, character + "No es aceptado como direccion", "Advertencia en el ingreso de datos", JOptionPane.WARNING_MESSAGE);
                              evt.consume();
                    }
          }//GEN-LAST:event_txtAddressKeyTyped

          private void txtAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressActionPerformed

          }//GEN-LAST:event_txtAddressActionPerformed

          private void btShowTarifsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btShowTarifsActionPerformed
                    ArrayList<Tarif> tarifs = new ArrayList<Tarif>();
                    MongoClient mongoClient = TarifDbController.conection();
                    MongoDatabase database = mongoClient.getDatabase("AirportTaxiScheduling");
                    String[] titles = {"Direccion salida", "Direccion llegada", "Valor a pagar"};
                    String[] TarifString = new String[3];
                    DefaultTableModel tableOfTravelersM = new DefaultTableModel(null, titles);
                    jtblTarifs.setModel(tableOfTravelersM);
                    TarifDbController.loadFromDatabase(tarifs, database, "Tarifs");
                    for (int i = 0; i < tarifs.size(); i++) {
                              TarifString[0] = "" + tarifs.get(i).getExitAdress() + "";
                              TarifString[1] = "" + tarifs.get(i).getArrivalAdress() + "";
                              TarifString[2] = "" + tarifs.get(i).getValueToPay() + "";

                              tableOfTravelersM.addRow(TarifString);
                    }

                    jtblTarifs.setModel(tableOfTravelersM);
                    jtblTarifs.setDefaultEditor(Object.class, null);
                    TableRowSorter<TableModel> sorter = new TableRowSorter<>(jtblTarifs.getModel());
                    sorter.setSortKeys(Collections.singletonList(new RowSorter.SortKey(1, SortOrder.DESCENDING)));
                    jtblTarifs.setRowSorter(sorter);
                    jtblTarifs.repaint();
          }//GEN-LAST:event_btShowTarifsActionPerformed

    private void chkbPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkbPaymentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkbPaymentActionPerformed

          /**
           * @param args the command line arguments
           */
          public static void main(String args[]) {
                    /* Set the Nimbus look and feel */
                    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
                    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
                     */
                    try {
                              for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                                        if ("Nimbus".equals(info.getName())) {
                                                  javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                                  break;
                                        }
                              }
                    } catch (ClassNotFoundException ex) {
                              java.util.logging.Logger.getLogger(FrmTravels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    } catch (InstantiationException ex) {
                              java.util.logging.Logger.getLogger(FrmTravels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                              java.util.logging.Logger.getLogger(FrmTravels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                              java.util.logging.Logger.getLogger(FrmTravels.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    }
                    //</editor-fold>
                    //</editor-fold>
                    //</editor-fold>
                    //</editor-fold>

                    /* Create and display the form */
                    java.awt.EventQueue.invokeLater(new Runnable() {
                              public void run() {
                                        new FrmTravels().setVisible(true);
                              }
                    });
          }

          // Variables declaration - do not modify//GEN-BEGIN:variables
          private javax.swing.JButton btShowTarifs;
          private javax.swing.JButton btnAccept;
          private javax.swing.JButton btnBack;
          private javax.swing.JButton btnClean;
          private javax.swing.JButton btnDelete;
          private javax.swing.JButton btnSetDate;
          private javax.swing.JButton btnUpdate;
          private javax.swing.JButton btnWiewTravels;
          private javax.swing.ButtonGroup btngPayed;
          private javax.swing.JCheckBox chkbAnnotation;
          private javax.swing.JCheckBox chkbPayment;
          private javax.swing.JComboBox<String> cmbDriver;
          private javax.swing.JComboBox<String> cmbTraveler;
          private com.toedter.plaf.JCalendarTheme jCalendarTheme1;
          private javax.swing.JLabel jLabel1;
          private javax.swing.JLabel jLabel2;
          private javax.swing.JLabel jLabel3;
          private javax.swing.JLabel jLabel4;
          private javax.swing.JLabel jLabel5;
          private javax.swing.JLabel jLabel6;
          private javax.swing.JLabel jLabel7;
          private javax.swing.JScrollPane jScrollPane2;
          private javax.swing.JScrollPane jScrollPane3;
          private com.toedter.calendar.JSpinnerDateEditor jdtechDateofOcurrence;
          private javax.swing.JTable jtblTarifs;
          private javax.swing.JTable jtblTravels;
          private javax.swing.JLabel lblDateOfOcurrence;
          private javax.swing.JLabel lblDriver;
          private javax.swing.JLabel lblPrice;
          private javax.swing.JLabel lblTraveler;
          private javax.swing.JLabel lblid;
          private javax.swing.JPanel pnlInput;
          private javax.swing.JRadioButton rbtnNoPayed;
          private javax.swing.JRadioButton rbtnPayed;
          private javax.swing.JTextField txtAddress;
          private javax.swing.JScrollPane txtPnlAnnotation;
          private javax.swing.JTextArea txtaAnnotation;
          // End of variables declaration//GEN-END:variables

          private void cleanForm() {
                    lblPrice.setText("");
                    lblid.setText("");
                    txtAddress.setText("");
                    lblDateOfOcurrence.setText("");
                    lblDriver.setText("");
                    lblTraveler.setText("");
                    cmbDriver.setSelectedIndex(0);
                    cmbTraveler.setSelectedIndex(0);
                    txtaAnnotation.setText("");
                    chkbAnnotation.setSelected(false);
                    txtaAnnotation.setEnabled(false);
                    rbtnPayed.setSelected(false);
                    rbtnNoPayed.setSelected(false);
                    DefaultTableModel tableOfTravels = new DefaultTableModel();
                    jtblTravels.setModel(tableOfTravels);
                    btnUpdate.setEnabled(false);
                    btnDelete.setEnabled(false);
                    btnAccept.setEnabled(false);
          }

          private void viewTravels() {
                    cleanForm();
                    dataBaseManager = TraveldbController.connectToDatabase( dataBaseManager);
                    ArrayList<Travel> travelsView = new ArrayList<Travel>();
                    Travel travelView = new Travel();
                    String[] titles = {"Id", "Conductor", "Pasajero", "Direccion", "Fecha", "Precio", "Pagado", "Nota"};
                    String[] travelsString = new String[8];
                    DefaultTableModel tableOfTravels = new DefaultTableModel(null, titles);
                    TraveldbController.load(travelsView, dataBaseManager.getDatabase(), collectionName);

                    for (int i = 0; i < travelsView.size(); i++) {
                              travelsString[0] = "" + travelsView.get(i).getId() + "";
                              travelsString[1] = "" + travelsView.get(i).getDriver() + "";
                              travelsString[2] = "" + travelsView.get(i).getTraveler() + "";
                              travelsString[3] = "" + travelsView.get(i).getAddress() + "";
                              travelsString[4] = "" + travelsView.get(i).getDateOfOcurrence() + "";
                              travelsString[5] = "" + travelsView.get(i).getPrice() + "";
                              travelsString[6] = "" + String.valueOf(travelsView.get(i).isPayed()) + "";
                              travelsString[7] = "" + travelsView.get(i).getAnnotation() + "";
                              tableOfTravels.addRow(travelsString);
                    }

                    jtblTravels.setModel(tableOfTravels);
                    jtblTravels.setDefaultEditor(Object.class, null);
          }

          private void updateTravel() {
                    int idTraveler;
                    Traveler traveler1 = new Traveler();

                    if (txtAddress.getText().isEmpty()
                            || lblPrice.getText().isEmpty()
                            || !btngPayed.isSelected(btngPayed.getSelection())) {
                              JOptionPane.showMessageDialog(null, "Error, algunos campos estan vacios ");
                    } else {
                              idTraveler = Generator.obtainIdTraveler(lblTraveler.getText());
                              traveler1 = TravelerdbController.findDocumentdb(traveler1, idTraveler);

                              travel = new Travel(Integer.parseInt(lblid.getText()), lblDriver.getText(), idTraveler, lblTraveler.getText(), txtAddress.getText(), jdtechDateofOcurrence.getDate(), Float.parseFloat(lblPrice.getText()), txtaAnnotation.getText(), btngPayed.isSelected(rbtnPayed.getModel()));

                              MongoCollection<Document> travelsCollection = dataBaseManager.getDatabase().getCollection(collectionName);

                              FindIterable<Document> result = travelsCollection.find(Filters.eq("id", Integer.parseInt(lblid.getText())));

                              travelsCollection.updateOne(result.first(), Updates.set("driver", travel.getDriver()));
                              travelsCollection.updateOne(result.first(), Updates.set("traveler", travel.getTraveler()));
                              travelsCollection.updateOne(result.first(), Updates.set("idTraveler", travel.getIdTraveler()));
                              travelsCollection.updateOne(result.first(), Updates.set("address", travel.getAddress()));
                              travelsCollection.updateOne(result.first(), Updates.set("annotation", travel.getAnnotation()));
                              travelsCollection.updateOne(result.first(), Updates.set("price", Float.valueOf(lblPrice.getText())));

                              if (travel.isPayed() == true) {
                                        if (travelerPayed == false) {
                                                  traveler1.setOutstandingBalance(traveler1.getOutstandingBalance() - travel.getPrice());
                                                  TravelerdbController.updateDocumentdb(traveler1, idTraveler);
                                        }

                              } else {
                                        if (travelerPayed == true) {
                                                  traveler1.setOutstandingBalance(traveler1.getOutstandingBalance() + travel.getPrice());
                                                  TravelerdbController.updateDocumentdb(traveler1, idTraveler);
                                        }
                              }
                    }

          }

          private void loadTravelerCombo() {
                    dataBaseManager = TraveldbController.connectToDatabase(dataBaseManager);
                    DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
                    TravelerdbController.loadFromDatabase(travelers, dataBaseManager.getDatabase(), "Travelers");
                    comboBoxModel.addElement("");

                    for (int i = 0; i < travelers.size(); i++) {

                              comboBoxModel.addElement(travelers.get(i).getId() + " " + travelers.get(i).getName() + " " + String.valueOf(travelers.get(i).getPhoneNumber()));
                    }
                    cmbTraveler.setModel(comboBoxModel);
          }

          private void loadTarifs() {

          }

          private void loadDriverCombo() {

                    dataBaseManager = TraveldbController.connectToDatabase(dataBaseManager);
                    DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
                    TaxiDriverdbController.loadFromDatabase(taxiDrivers, dataBaseManager.getDatabase(), "TaxiDriver");
                    comboBoxModel.addElement("");

                    for (int i = 0; i < taxiDrivers.size(); i++) {
                              comboBoxModel.addElement(taxiDrivers.get(i).getName() + " " + String.valueOf((taxiDrivers.get(i).getPhoneNumber())));
                    }
                    cmbDriver.setModel(comboBoxModel);
          }

          

}
