package ec.edu.espe.fashionStore.view;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.mongodb.MongoException;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import ec.edu.espe.fashionStore.controller.Controller;
import ec.edu.espe.fashionstore.model.Measurement;
import ec.edu.espe.fashionstore.model.Order;
import java.text.MessageFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.bson.BsonDocument;
import org.bson.BsonInt64;
import org.bson.Document;
import org.bson.conversions.Bson;

/**
 *
 * @author Jonathan Jaguaco, Pythons, DCCO-ESPE
 */
public class FrmFindOrder extends javax.swing.JFrame {

    DefaultTableModel model = new DefaultTableModel();
    private static Order order = new Order();

    /**
     * Creates new form FrmReadOrder
     */
    public FrmFindOrder() {
        initComponents();
        mostTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void mostTable() {
        model.addColumn("Order");
        model.addColumn("Name");
        model.addColumn("Phonenumber");
        model.addColumn("Day");
        model.addColumn("Month");
        model.addColumn("Year");
        model.addColumn("Neck Measurement");
        model.addColumn("Chest Measurement");
        model.addColumn("Shoulder Measurement");
        model.addColumn("Arm Measurement");
        model.addColumn("Hip Measurement");
        model.addColumn("Waist Measurement");
        model.addColumn("Leg Measurement");
        this.tblOrder.setModel(model);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtOrder = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnFind = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        btnback = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnDeleteOrder = new javax.swing.JButton();
        btnUpdateOrder = new javax.swing.JButton();
        btnViewAllOrders = new javax.swing.JButton();
        btnPrintReport = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFashionStore = new javax.swing.JMenu();
        itmAbout = new javax.swing.JMenuItem();
        itmExit = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        itmReportIssues = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fashion Store - Find Order");

        jLabel1.setText("Order ID:");

        txtOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderActionPerformed(evt);
            }
        });
        txtOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOrderKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Trajan Pro 3", 0, 36)); // NOI18N
        jLabel2.setText("Find Order");

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblOrder);

        btnback.setText("< Back");
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Trajan Pro 3", 0, 18)); // NOI18N
        jLabel3.setText("Order Information");

        btnDeleteOrder.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteOrder.setText("Delete");
        btnDeleteOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOrderActionPerformed(evt);
            }
        });

        btnUpdateOrder.setText("Update");
        btnUpdateOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateOrderActionPerformed(evt);
            }
        });

        btnViewAllOrders.setText("View All Orders");
        btnViewAllOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllOrdersActionPerformed(evt);
            }
        });

        btnPrintReport.setText("Print Report");
        btnPrintReport.setEnabled(false);
        btnPrintReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintReportActionPerformed(evt);
            }
        });

        mnuFashionStore.setText("Fashion Store");

        itmAbout.setText("About");
        itmAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmAboutActionPerformed(evt);
            }
        });
        mnuFashionStore.add(itmAbout);

        itmExit.setText("Exit");
        itmExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmExitActionPerformed(evt);
            }
        });
        mnuFashionStore.add(itmExit);

        jMenuBar1.add(mnuFashionStore);

        jMenu6.setText("Help");

        itmReportIssues.setText("Report Issues");
        itmReportIssues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmReportIssuesActionPerformed(evt);
            }
        });
        jMenu6.add(itmReportIssues);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFind)
                        .addGap(92, 92, 92)
                        .addComponent(btnViewAllOrders)
                        .addGap(61, 61, 61)
                        .addComponent(btnPrintReport))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(btnback)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdateOrder)
                        .addGap(126, 126, 126)
                        .addComponent(btnDeleteOrder)
                        .addGap(135, 135, 135)))
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addGap(289, 289, 289)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(211, 211, 211))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind)
                    .addComponent(btnViewAllOrders)
                    .addComponent(btnPrintReport)
                    .addComponent(jLabel1))
                .addGap(30, 30, 30)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnback)
                    .addComponent(btnUpdateOrder)
                    .addComponent(btnDeleteOrder))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        FrmMenuOrder backmenu = new FrmMenuOrder();
        backmenu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnbackActionPerformed

    private void txtOrderKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrderKeyTyped

        char d = evt.getKeyChar();

        if ((Character.isDigit(d)) || (Character.isISOControl(d))) {
            txtOrder.setEditable(true);
        } else {
            txtOrder.setEditable(false);
            JOptionPane.showMessageDialog(this, d + " is not accepted here", "Warning on input data", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtOrderKeyTyped

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed

        int id = Integer.parseInt(txtOrder.getText());
        model.getDataVector().removeAllElements();
        String uri = "mongodb+srv://17POO:password555@fashionstore.nh5mcou.mongodb.net/test";

        try ( MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("FashionStore");

            try {
                //Conection with database server
                Bson command = new BsonDocument("ping", new BsonInt64(1));
                org.bson.Document commandResult = database.runCommand(command);
                System.out.println("Connected successfully to server.");
                Measurement measurement = new Measurement();

                order = Controller.readMongo(database, id);

                String[] Datos = new String[13];

                Datos[0] = String.valueOf(order.getId());
                Datos[1] = order.getCustomerName();
                Datos[2] = String.valueOf(order.getPhoneNumber());
                Datos[3] = order.getDay();
                Datos[4] = order.getMonth();
                Datos[5] = order.getYear();
                Datos[6] = String.valueOf(order.getMeasurement().getNeckMeasurement());
                Datos[7] = String.valueOf(order.getMeasurement().getChestMeasurement());
                Datos[8] = String.valueOf(order.getMeasurement().getShoulderMeasurement());
                Datos[9] = String.valueOf(order.getMeasurement().getArmMeasurement());
                Datos[10] = String.valueOf(order.getMeasurement().getHipMeasurement());
                Datos[11] = String.valueOf(order.getMeasurement().getWaistMeasurement());
                Datos[12] = String.valueOf(order.getMeasurement().getLegMeasurement());

                model.addRow(Datos);
                btnPrintReport.setEnabled(true);

            } catch (MongoException me) {
                System.err.println("An error ocurred while attempting to connect: " + me);
            }
        }

        //order = ConectionMongo.findOrder(order);
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnDeleteOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOrderActionPerformed
        if (txtOrder.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Order ID field is empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
        } else {
            int option = JOptionPane.showConfirmDialog(this, "Do you want to continue?");
            if (option == 0) {

                int id = Integer.parseInt(txtOrder.getText());
                String uri = "mongodb+srv://17POO:password555@fashionstore.nh5mcou.mongodb.net/test";

                try ( MongoClient mongoClient = MongoClients.create(uri)) {
                    MongoDatabase database = mongoClient.getDatabase("FashionStore");

                    try {
                        //Conection with database server
                        Bson command = new BsonDocument("ping", new BsonInt64(1));
                        org.bson.Document commandResult = database.runCommand(command);
                        System.out.println("Connected successfully to server.");
                        Measurement measurement = new Measurement();
                        order = Controller.readMongo(database, id);
                        Controller.deleteMongo(database, order);
                        JOptionPane.showMessageDialog(this, "Order Delete");
                    } catch (MongoException me) {
                        System.err.println("An error ocurred while attempting to connect: " + me);
                    }
                }
            } else if (option == 1) {
                JOptionPane.showMessageDialog(this, "Operation Cancelled");
            } else if (option == 2) {
                FrmMenuOrder backmenu = new FrmMenuOrder();
                backmenu.setVisible(true);
                this.dispose();
            }
        }

    }//GEN-LAST:event_btnDeleteOrderActionPerformed

    private void btnUpdateOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateOrderActionPerformed

        if (txtOrder.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Order ID field is empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
        } else {
            FrmCreateOrder update = new FrmCreateOrder();
            update.setVisible(true);
            update.txtOrder.setText(String.valueOf(order.getId()));
            update.txtName.setText(order.getCustomerName());
            update.txtPhone.setText(String.valueOf(order.getPhoneNumber()));
            update.cmbDay.setSelectedItem(order.getDay());
            update.cmbMonth.setSelectedItem(order.getMonth());
            update.cmbYear.setSelectedItem(order.getYear());
            update.btnSave.setEnabled(false);
            update.txtOrder.setEnabled(false);
            update.btnUpdateOrder.setEnabled(true);
            update.btnAdd.setEnabled(true);
            update.btnAdd.setText("Edit Measurements");
            this.dispose();
        }

    }//GEN-LAST:event_btnUpdateOrderActionPerformed

    private void btnViewAllOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllOrdersActionPerformed
        ArrayList<String> allOrders = new ArrayList<>();
        Gson gson = new Gson();
        String[] datos = new String[13];
        String document = "";

        model.getDataVector().removeAllElements();

        String uri = "mongodb+srv://17POO:password555@fashionstore.nh5mcou.mongodb.net/test";

        try ( MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("FashionStore");

            try {
                //Conection with database server
                Bson command = new BsonDocument("ping", new BsonInt64(1));
                org.bson.Document commandResult = database.runCommand(command);
                System.out.println("Connected successfully to server.");

                MongoCollection<Document> collection = database.getCollection("Orders");

                Document query = collection.find().first();
                MongoCursor<Document> cursor = collection.find().iterator();

                document = query.toJson();
                TypeToken<Order> type = new TypeToken<Order>() {
                };
                while (cursor.hasNext()) {
                    allOrders.add(cursor.next().toJson());

                }
                for (int i = 0; i < allOrders.size(); i++) {
                    Order allOrdersData = gson.fromJson(allOrders.get(i), type.getType());
                    datos[0] = String.valueOf(allOrdersData.getId());
                    datos[1] = allOrdersData.getCustomerName();
                    datos[2] = String.valueOf(allOrdersData.getPhoneNumber());
                    datos[3] = allOrdersData.getDay();
                    datos[4] = allOrdersData.getMonth();
                    datos[5] = allOrdersData.getYear();
                    datos[6] = String.valueOf(allOrdersData.getMeasurement().getNeckMeasurement());
                    datos[7] = String.valueOf(allOrdersData.getMeasurement().getChestMeasurement());
                    datos[8] = String.valueOf(allOrdersData.getMeasurement().getShoulderMeasurement());
                    datos[9] = String.valueOf(allOrdersData.getMeasurement().getArmMeasurement());
                    datos[10] = String.valueOf(allOrdersData.getMeasurement().getHipMeasurement());
                    datos[11] = String.valueOf(allOrdersData.getMeasurement().getWaistMeasurement());
                    datos[12] = String.valueOf(allOrdersData.getMeasurement().getLegMeasurement());

                    model.addRow(datos);
                    btnPrintReport.setEnabled(true);

                }

            } catch (MongoException me) {
                System.err.println("An error ocurred while attempting to connect: " + me);
                JOptionPane.showMessageDialog(this, "An error ocurred while attempting to connect: " + me, "Database Conection", JOptionPane.WARNING_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnViewAllOrdersActionPerformed

    private void btnPrintReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintReportActionPerformed
        MessageFormat header = new MessageFormat("Orders Report");
        MessageFormat footer = new MessageFormat("page {0,number,integer}");

        try {
            tblOrder.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        } catch (Exception e) {
            e.getMessage();
        }
    }//GEN-LAST:event_btnPrintReportActionPerformed

    private void txtOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderActionPerformed

    private void itmAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmAboutActionPerformed
        FrmAbout about = new FrmAbout();
        about.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_itmAboutActionPerformed

    private void itmExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_itmExitActionPerformed

    private void itmReportIssuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmReportIssuesActionPerformed
        FrmReportIssue report = new FrmReportIssue();
        report.setVisible(true);
    }//GEN-LAST:event_itmReportIssuesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmFindOrder.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmFindOrder.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmFindOrder.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmFindOrder.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmFindOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteOrder;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnPrintReport;
    private javax.swing.JButton btnUpdateOrder;
    private javax.swing.JButton btnViewAllOrders;
    private javax.swing.JButton btnback;
    private javax.swing.JMenuItem itmAbout;
    private javax.swing.JMenuItem itmExit;
    private javax.swing.JMenuItem itmReportIssues;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu mnuFashionStore;
    private javax.swing.JTable tblOrder;
    private javax.swing.JTextField txtOrder;
    // End of variables declaration//GEN-END:variables
}
