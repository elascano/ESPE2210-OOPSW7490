package ec.edu.espe.apanado.view;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.mongodb.MongoException;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import ec.edu.espe.apanado.model.Product;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


/**
 *
 * @author Christopher Bazurto, DeltaTeam, DCCO-ESPE
 */
public class Inventaryview extends javax.swing.JFrame {

    /**
     * Creates new form Inventaryview
     */
    public Inventaryview() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtProductName = new javax.swing.JLabel();
        txfProductName = new javax.swing.JTextField();
        txtProductPrice = new javax.swing.JLabel();
        txtProductQuantity = new javax.swing.JLabel();
        txfProductPrice = new javax.swing.JTextField();
        txfProductQuantity = new javax.swing.JTextField();
        txtProductID = new javax.swing.JLabel();
        txfProductID = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtProductName.setText("Product Name:");

        txfProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfProductNameActionPerformed(evt);
            }
        });

        txtProductPrice.setText("Product Price:");

        txtProductQuantity.setText("Product Quantity:");

        txfProductQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfProductQuantityActionPerformed(evt);
            }
        });

        txtProductID.setText("Product ID:");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product Name", "Price", "Quantity"
            }
        ));
        jScrollPane1.setViewportView(tblProduct);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel1.setText("INVENTARY");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtProductName)
                                    .addComponent(txtProductPrice)
                                    .addComponent(txtProductQuantity))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txfProductName)
                                            .addComponent(txfProductPrice)
                                            .addComponent(txfProductQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(32, 32, 32)
                                        .addComponent(txtProductID)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txfProductID, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel1))
                                .addGap(37, 37, 37))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(btnAdd)
                        .addGap(31, 31, 31)
                        .addComponent(btnUpdate)
                        .addGap(44, 44, 44)
                        .addComponent(btnDelete)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProductName)
                    .addComponent(txfProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProductID)
                    .addComponent(txfProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProductPrice)
                    .addComponent(txfProductPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProductQuantity)
                    .addComponent(txfProductQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txfProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfProductNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfProductNameActionPerformed

    private void txfProductQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfProductQuantityActionPerformed
    }//GEN-LAST:event_txfProductQuantityActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        String productName = txfProductName.getText();
        String productPrice = txfProductPrice.getText();
        String productQuantity = txfProductQuantity.getText();
        String productID = txfProductID.getText();
        String dataProduct [] = {txfProductID.getText(),txfProductName.getText(),txfProductPrice.getText(),txfProductQuantity.getText()} ;
        String url = "mongodb+srv://usBazurto:contrasenia99@cluster0.js9z1jh.mongodb.net/test";
        int validAdd=0;
        try(MongoClient mongoClient = MongoClients.create(url))
        {
            MongoDatabase database = mongoClient.getDatabase("Project");
            try
            {
                MongoCollection<Document> collection = database.getCollection("inventory");
 
                Document inventory = new Document("_id", new ObjectId())
                        .append("productID", productID)
                        .append("productName", productName)
                        .append("productPrice", productPrice)
                        .append("productQuantity",productQuantity);
                
                collection.insertOne(inventory);
                validAdd=1;
            } catch (MongoException e)
            {
                JOptionPane.showMessageDialog(this,"Error to connect with the database " + e,"Warning",JOptionPane.WARNING_MESSAGE);
            }           
        }
        if (validAdd == 1){
            JOptionPane.showMessageDialog(this,"Product Added! successfuly!","Product Added",JOptionPane.INFORMATION_MESSAGE);
            DefaultTableModel tblModel = (DefaultTableModel)tblProduct.getModel();
            tblModel.addRow(dataProduct);
            txfProductName.setText("");
            txfProductID.setText("");
            txfProductPrice.setText("");
            txfProductQuantity.setText("");
            
        }else{
            JOptionPane.showMessageDialog(this,"Product don't Added!","Product Added",JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

 
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        Gson gson = new Gson();
        String url = "mongodb+srv://usBazurto:contrasenia99@cluster0.js9z1jh.mongodb.net/test";
        try(MongoClient mongoClient = MongoClients.create(url))
        {
            MongoDatabase database = mongoClient.getDatabase("Project");
            try
            {
                System.out.println("Connected to the database.");
                MongoCollection<Document> collection = database.getCollection("inventory");
                String productID = txfProductID.getText();

                Bson filter = Filters.eq("productID", productID);
                try {
                    Document doc = collection.find(Filters.and(filter)).first();
                    System.out.println("Ingredient: " + doc.toJson());                    
                    Product product = gson.fromJson(doc.toJson(), Product.class);
                    JOptionPane.showMessageDialog(this,"The product whit id "+String.valueOf(product.getProductID()) +" is found!!", "Product Search!!", JOptionPane.INFORMATION_MESSAGE);
                    txfProductName.setText(product.getProductName());
                    txfProductID.setText(String.valueOf(product.getProductID()));
                    txfProductPrice.setText(String.valueOf(product.getProductPrice()));
                    txfProductQuantity.setText(product.getProductQuantity());
                }catch(Exception e){
                    JOptionPane.showMessageDialog(this,"Product don't exist","Product Search",JOptionPane.WARNING_MESSAGE);
                    System.out.println( e);
                }

                
                
              
            } catch (MongoException e)
            {
                JOptionPane.showMessageDialog(this,"Error to connect with the database","Error to conect",JOptionPane.WARNING_MESSAGE);
                System.out.println("Error to connect with the database " + e);
            }            
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        String url = "mongodb+srv://usBazurto:contrasenia99@cluster0.js9z1jh.mongodb.net/test";
        
        try(MongoClient mongoClient = MongoClients.create(url))
        {
            MongoDatabase database = mongoClient.getDatabase("Project");
            try
            {
                String productID = txfProductID.getText();
                MongoCollection collection = database.getCollection("inventory");
                Bson filter = Filters.eq("productID", productID);
                try{
                    String productName = txfProductName.getText();
                    String productPrice = txfProductPrice.getText();
                    String productQuantity = txfProductQuantity.getText();
                    Bson updates = Updates.combine(Updates.set("productID", txfProductID.getText()),
                            Updates.set("productName", txfProductName.getText()),
                            Updates.set("productPrice", txfProductPrice.getText()),
                            Updates.set("productQuantity", txfProductQuantity.getText()));
                    collection.updateOne(filter, updates);
                JOptionPane.showMessageDialog(this,"Product Update! successfuly!","Product Upadate",JOptionPane.INFORMATION_MESSAGE);

                System.out.println("DATA UPDATED");
                }catch(MongoException e){
                    JOptionPane.showMessageDialog(this,"Product don't update","Product Update",JOptionPane.WARNING_MESSAGE);
                    System.out.println( e);
                }
                
                
            } catch (MongoException e)
            {
                JOptionPane.showMessageDialog(this,"Error to connect with the database","Error to conect",JOptionPane.WARNING_MESSAGE);
                System.out.println("Error to connect with the database " + e);
            }           
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel)tblProduct.getModel();
        String url = "mongodb+srv://usBazurto:contrasenia99@cluster0.js9z1jh.mongodb.net/test";
         try(MongoClient mongoClient = MongoClients.create(url))
        {
            MongoDatabase database = mongoClient.getDatabase("Project");
            try
            {
                
                System.out.println("Connected to the database.");                
                MongoCollection collection = database.getCollection("inventory");              
                String productID = txfProductID.getText();
                
                Bson filter = Filters.eq("productID", productID); 
                
                collection.deleteOne(filter);
                JOptionPane.showMessageDialog(this,"DATA DELETED! successfuly!","DATA DELETED",JOptionPane.INFORMATION_MESSAGE);
                System.out.println("DATA DELETED");
                
            } catch (MongoException e)
            {
                JOptionPane.showMessageDialog(this,"Error to connect with the database","Error to conect",JOptionPane.WARNING_MESSAGE);
                System.out.println("Error to connect with the database " + e);
            }           
        }  
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inventaryview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inventaryview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inventaryview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inventaryview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inventaryview().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProduct;
    private javax.swing.JTextField txfProductID;
    private javax.swing.JTextField txfProductName;
    private javax.swing.JTextField txfProductPrice;
    private javax.swing.JTextField txfProductQuantity;
    private javax.swing.JLabel txtProductID;
    private javax.swing.JLabel txtProductName;
    private javax.swing.JLabel txtProductPrice;
    private javax.swing.JLabel txtProductQuantity;
    // End of variables declaration//GEN-END:variables
}
