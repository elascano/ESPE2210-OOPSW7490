/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ec.edu.espe.apanadoMenu.view;

import ec.edu.espe.apanadoMenu.model.Food;
import ec.edu.espe.apanadoMenu.model.Order;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import com.mongodb.MongoException;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import ec.edu.espe.apanadoMenu.model.Customer;
import java.util.ArrayList;
import org.bson.BsonDocument;
import org.bson.BsonInt64;
import org.bson.Document;
import org.bson.conversions.Bson;



/**
 *
 * @author Daniel Aviles, DeltaTeam, DCCO-ESPE
 */
public class frmBilling extends javax.swing.JFrame {
    private DefaultTableModel tblModel;
    private String[] header = {"Product","Amount","Unity Price","Total Price"};
    
    /**
     * Creates new form frmBilling
     */
    public frmBilling(ArrayList<Food> foodOrdered) {
        initComponents();
        tblModel = new DefaultTableModel (header,0);
        tblOrder.setModel(tblModel);
        double totalValue = 0;
        for(int i=0;i<foodOrdered.size();i++){
            Food food;
            food = foodOrdered.get(i);
            
            tblModel.addRow(food.toArray());
            totalValue = totalValue+foodOrdered.get(i).getTotalPrice();
            
        }

        txtTotal.setText(Double.toString(totalValue));
        

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btmgPaymentForm = new javax.swing.ButtonGroup();
        pnlButtons = new javax.swing.JPanel();
        btmCheckout = new javax.swing.JButton();
        btmBack = new javax.swing.JButton();
        totalValue = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtID = new javax.swing.JTextField();
        txtTotal = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        rbtmCreditCard = new javax.swing.JRadioButton();
        rbtmCash = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtAddres = new javax.swing.JTextField();
        txtCellPhone = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btmCheckout.setText("Checkout");
        btmCheckout.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btmCheckoutItemStateChanged(evt);
            }
        });
        btmCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmCheckoutActionPerformed(evt);
            }
        });

        btmBack.setText("Cancel");
        btmBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonsLayout = new javax.swing.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlButtonsLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(btmCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115)
                .addComponent(btmBack, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlButtonsLayout.setVerticalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btmBack, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btmCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(89, 89, 89))
        );

        jLabel2.setText("Total sin IVA:  ");

        jLabel1.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel1.setText("Biling Data");

        jLabel5.setText("Name: ");

        jLabel6.setText("Email: ");

        jLabel7.setText("ID: ");

        txtName.setToolTipText("LastName Name");
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });
        txtName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNameKeyTyped(evt);
            }
        });

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });
        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmailKeyTyped(evt);
            }
        });

        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });
        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIDKeyTyped(evt);
            }
        });

        jLabel3.setText("$");

        tblOrder.setAutoCreateRowSorter(true);
        tblOrder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblOrder.setEnabled(false);
        jScrollPane1.setViewportView(tblOrder);

        btmgPaymentForm.add(rbtmCreditCard);
        rbtmCreditCard.setText("Pago con tarjeta");
        rbtmCreditCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtmCreditCardActionPerformed(evt);
            }
        });

        btmgPaymentForm.add(rbtmCash);
        rbtmCash.setText("Efectivo");
        rbtmCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtmCashActionPerformed(evt);
            }
        });

        jLabel4.setText("Direccion:");

        jLabel8.setText("Numero de telefono:");

        txtCellPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCellPhoneActionPerformed(evt);
            }
        });
        txtCellPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCellPhoneKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout totalValueLayout = new javax.swing.GroupLayout(totalValue);
        totalValue.setLayout(totalValueLayout);
        totalValueLayout.setHorizontalGroup(
            totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(totalValueLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(totalValueLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(totalValueLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel7)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(totalValueLayout.createSequentialGroup()
                            .addComponent(rbtmCreditCard, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(rbtmCash, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(totalValueLayout.createSequentialGroup()
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(txtCellPhone))
                        .addGroup(totalValueLayout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGroup(totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(totalValueLayout.createSequentialGroup()
                                    .addGap(50, 50, 50)
                                    .addComponent(jLabel1))
                                .addGroup(totalValueLayout.createSequentialGroup()
                                    .addGap(99, 99, 99)
                                    .addGroup(totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtAddres))))))
                    .addComponent(jLabel2))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        totalValueLayout.setVerticalGroup(
            totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(totalValueLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addGroup(totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtAddres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtCellPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtmCreditCard)
                    .addComponent(rbtmCash))
                .addGap(29, 29, 29)
                .addGroup(totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, totalValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3))
                    .addComponent(txtTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(totalValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(totalValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlButtons, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btmCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmCheckoutActionPerformed
        int desition = JOptionPane.showConfirmDialog(this, "Do you want to continue?");
        boolean idValidate;
        boolean emailValidate;
        
        boolean posibleToValidate = true;
        boolean posibleToContinue = true;
        
        
        
        if(txtName.getText() == null){
            posibleToValidate=false;
            JOptionPane.showConfirmDialog(this, "No name entered", "Warnig on input Name", JOptionPane.WARNING_MESSAGE);
        }
        if(txtID.getText() == null){
            posibleToValidate=false;
            JOptionPane.showConfirmDialog(this, "No ID entered", "Warnig on input ID", JOptionPane.WARNING_MESSAGE);
        }
        if(txtEmail.getText() == null){
            posibleToValidate=false;
            JOptionPane.showConfirmDialog(this, "No email entered", "Warnig on input Email", JOptionPane.WARNING_MESSAGE);
        }
        
        
        
        if(posibleToValidate){
            if (desition == 0) {
                //emptyFields();
                //btmSave.setEnabled(false);

                emailValidate = validateEmail(txtEmail.getText());
                if (!emailValidate) {
                    posibleToContinue = false;
                    JOptionPane.showConfirmDialog(this, "Email is not valided", "Warnig on input Email", JOptionPane.WARNING_MESSAGE);
                }

                idValidate = validateID(txtID.getText());
                if (!idValidate) {
                    posibleToContinue = false;
                    JOptionPane.showConfirmDialog(this, "ID is not valided", "Warnig on input ID", JOptionPane.WARNING_MESSAGE);
                }
                
                

            }
            if (desition == 1) {
                //emptyFields();
                //btmSave.setEnabled(false);
            }
            if (desition == 2) {

            }
        }
        
        long collectionSize;
        int id;
        Order order;
        Customer customer;

        if(posibleToContinue){
            String uri = "mongodb+srv://oop:oop@cluster0.f4j9tfw.mongodb.net/?retryWrites=true&w=majority";
            try ( MongoClient mongoClient = MongoClients.create(uri)) {
                MongoDatabase database = mongoClient.getDatabase("Project");
                try {
                    Bson command = new BsonDocument("ping", new BsonInt64(1));
                    Document commandResult = database.runCommand(command);
                    System.out.println("Connected successfully to server.");
                    MongoCollection<Document> collection = database.getCollection("Order");

                    collectionSize = collection.countDocuments();
                    id = (int) (collectionSize + 1);

                    order = new Order(id,txtName.getText(),txtEmail.getText(),Integer.parseInt(txtID.getText()),Double.parseDouble(txtTotal.getText()));
                    
                    
                    

                    
                    
                    Document newOrder = new Document("id",id);
                    newOrder.append("name", txtName.getText());
                    newOrder.append("email", txtEmail.getText());
                    newOrder.append("ID", Integer.parseInt(txtID.getText()));
                    newOrder.append("totalPrice", Double.parseDouble(txtTotal.getText()));
                    collection.insertOne(newOrder);
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    

                } catch (MongoException me) {
                }
            }
            
            try ( MongoClient mongoClient = MongoClients.create(uri)) {
                MongoDatabase database = mongoClient.getDatabase("Project");
                try {
                    Bson command = new BsonDocument("ping", new BsonInt64(1));
                    Document commandResult = database.runCommand(command);
                    System.out.println("Connected successfully to server.");
                    MongoCollection<Document> collection = database.getCollection("CustomerBillingData");

                    collectionSize = collection.countDocuments();
                    id = (int) (collectionSize + 1);
                    
                    
                    
                    customer = new Customer(txtName.getText(),txtEmail.getText(),Integer.parseInt(txtID.getText()),txtAddres.getText(),Integer.parseInt(txtCellPhone.getText()));
                    
                    
                    Document newCustomer = new Document("id",id);
                    newCustomer.append("name", txtName.getText());
                    newCustomer.append("email", txtEmail.getText());
                    newCustomer.append("ID", Integer.parseInt(txtID.getText()));
                    newCustomer.append("Addres", txtAddres.getText());
                    newCustomer.append("CellPhoneNumber", Integer.parseInt(txtCellPhone.getText()));

                    collection.insertOne(newCustomer);
                    

                } catch (MongoException me) {
                }
            }
            
            
            
            
            
            
        }

        //JOptionPane.showMessageDialog(this, option);
        //this,"", String.valueOf(option), JOptionPane.WARNING_MESSAGE
    }//GEN-LAST:event_btmCheckoutActionPerformed

    private void btmBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmBackActionPerformed
        dispose();
    }//GEN-LAST:event_btmBackActionPerformed

    private void txtNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyTyped
        
        int key = evt.getKeyChar();

        boolean capitalLetters = key >= 65 && key <= 90;
        boolean lowercase = key >= 97 && key <= 122;
        boolean spaceBar = key == 32;

        if (!(lowercase || capitalLetters || spaceBar)) {
            evt.consume();
        }
//TODO validate if it not a char
//        char sumPairs = evt.getKeyChar();
//        if(!(Character.isAlphabetic(sumPairs)) || (sumPairs==KeyEvent.VK_BACK_SPACE) || (sumPairs==KeyEvent.VK_DELETE)){
//            JOptionPane.showConfirmDialog(this, sumPairs + " is not accepted here","Warnig on input data", JOptionPane.WARNING_MESSAGE);
//        }

            //TODO remove last character
            //focus the cursor to the input that is wrong
    }//GEN-LAST:event_txtNameKeyTyped

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyTyped
//        char c = evt.getKeyChar();
//        if(!(Character.isAlphabetic(c)) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE)){
//            JOptionPane.showConfirmDialog(this, c + " is not accepted here","Warnig on input data", JOptionPane.WARNING_MESSAGE);
//        }    
        
//        int key = evt.getKeyChar();
//
//        boolean capitalLetters = key >= 65 && key <= 90;
//        boolean lowercase = key >= 97 && key <= 122;
//        boolean spaceBar = key == 32;
//
//        if (!(lowercase || capitalLetters || spaceBar)) {
//            evt.consume();
//        }
        
        
    }//GEN-LAST:event_txtEmailKeyTyped

    private void txtIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyTyped
        int key = evt.getKeyChar();

        boolean numbers = key >= 48 && key <= 57;

        if (!numbers) {
            evt.consume();
        }

        if (txtID.getText().trim().length() == 10) {
            evt.consume();
        }
//        char sumPairs = evt.getKeyChar();
//        if(!(Character.isDigit(sumPairs)) || (sumPairs==KeyEvent.VK_BACK_SPACE) || (sumPairs==KeyEvent.VK_DELETE)){
//            JOptionPane.showConfirmDialog(this, sumPairs + " is not accepted here","Warnig on input data", JOptionPane.WARNING_MESSAGE);
//        }
    }//GEN-LAST:event_txtIDKeyTyped

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    private void btmCheckoutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btmCheckoutItemStateChanged
//        if(txtName.getText() != null){
//            btmCheckout.setEnabled(true);
//        }
    }//GEN-LAST:event_btmCheckoutItemStateChanged

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void rbtmCreditCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtmCreditCardActionPerformed
        
        
    }//GEN-LAST:event_rbtmCreditCardActionPerformed

    private void rbtmCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtmCashActionPerformed
        
    }//GEN-LAST:event_rbtmCashActionPerformed

    private void txtCellPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCellPhoneActionPerformed

    }//GEN-LAST:event_txtCellPhoneActionPerformed

    private void txtCellPhoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCellPhoneKeyTyped
        int key = evt.getKeyChar();

        boolean numbers = key >= 48 && key <= 57;

        if (!numbers) {
            evt.consume();
        }

        if (txtCellPhone.getText().trim().length() == 10) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCellPhoneKeyTyped

    /**
     * @param args the command line arguments
     */
    
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(frmBilling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(frmBilling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(frmBilling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(frmBilling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new frmBilling().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btmBack;
    private javax.swing.JButton btmCheckout;
    private javax.swing.ButtonGroup btmgPaymentForm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JRadioButton rbtmCash;
    private javax.swing.JRadioButton rbtmCreditCard;
    private javax.swing.JTable tblOrder;
    private javax.swing.JPanel totalValue;
    private javax.swing.JTextField txtAddres;
    private javax.swing.JTextField txtCellPhone;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JLabel txtTotal;
    // End of variables declaration//GEN-END:variables




    
    public static boolean validateID(String id) {
        int plus = 0;
        if (id.length() == 9) {
            return false;
        } else {
            int pair[] = new int[id.length() / 2];
            int odd[] = new int[(id.length() / 2)];
            int sumPairs = 0;
            int oddsum = 1;
            for (int i = 0; i < id.length() / 2; i++) {
                pair[i] = Integer.parseInt(String.valueOf(id.charAt(sumPairs)));
                sumPairs = sumPairs + 2;
                if (i < (id.length() / 2) - 1) {
                    odd[i] = Integer.parseInt(String.valueOf(id.charAt(oddsum)));
                    oddsum = oddsum + 2;
                }
            }

            for (int i = 0; i < pair.length; i++) {
                pair[i] = pair[i] * 2;
                if (pair[i] > 9) {
                    pair[i] = pair[i] - 9;
                }
                plus = plus + pair[i] + odd[i];
            }
            int assistant = plus / 10;
            int tenthNumber = (assistant + 1) * 10;
            if ((tenthNumber - plus) == Integer.parseInt(String.valueOf(id.charAt(id.length() - 1)))) {
                return true;
            } else if (plus % 10 == 0 && id.charAt(id.length() - 1) == '0') {
                return true;
            } else {
                return false;
            }

        }
    }
    
    
    public static boolean validateEmail(String email){
 
        Pattern pattern = Pattern.compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");

        Matcher mather = pattern.matcher(email);
 
        if (mather.find() == true) {
            return true;
        } else {
            return false;
        }
    }
    
}
