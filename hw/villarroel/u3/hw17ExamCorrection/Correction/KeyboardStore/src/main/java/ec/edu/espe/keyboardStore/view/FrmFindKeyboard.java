/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ec.edu.espe.keyboardStore.view;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import ec.edu.espe.keyboardStore.controller.KeyboardController;
import ec.edu.espe.keyboardStore.model.Keyboard;
import ec.edu.espe.keyboardStore.utils.MongoDBManager;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;

/**
 *
 * @author Justin Villarroel, ProgressTeam, DCCO-ESPE
 */
public class FrmFindKeyboard extends javax.swing.JFrame {

    /**
     * Creates new form FrmFindKeyboard
     */
    public FrmFindKeyboard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ingressId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        findButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        keyboardTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        findAllButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        keyboardMarkTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        keyboardTypeTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        PriceTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Minecraft", 0, 24)); // NOI18N
        jLabel1.setText("Find Keyboard");

        ingressId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingressIdActionPerformed(evt);
            }
        });
        ingressId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ingressIdKeyTyped(evt);
            }
        });

        jLabel2.setText("ID:");

        findButton.setText("Find");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        keyboardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "TradeMark", "Type Keyboard", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(keyboardTable);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        findAllButton.setText("See All");
        findAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findAllButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Keyboard Mark:");

        keyboardMarkTF.setEditable(false);

        jLabel4.setText("Keyboard Type:");

        keyboardTypeTF.setEditable(false);

        jLabel5.setText("Price:");

        PriceTF.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(backButton)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(PriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(ingressId, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(107, 107, 107)
                                .addComponent(findButton))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(keyboardMarkTF))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(keyboardTypeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(157, 157, 157)
                                .addComponent(findAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backButton))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ingressId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(findButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(keyboardMarkTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(keyboardTypeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(PriceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findAllButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        if (ingressId.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error, algunos campos estan vacios");
        } else {
            int takeId = Integer.valueOf(ingressId.getText());
            Keyboard keyboard = new Keyboard();
            keyboard = KeyboardController.findKeyboardMdb(keyboard, takeId);
            if (keyboard.getPrice() != 0) {
                keyboardMarkTF.setText(keyboard.getTradeMark());
                keyboardTypeTF.setText(keyboard.getKeyboardType());
                PriceTF.setText(Float.toString(keyboard.getPrice()));
            } else {
                cleanPanel();
            }

        }
    }//GEN-LAST:event_findButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        FrmMenu menu;
        menu = new FrmMenu();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void findAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findAllButtonActionPerformed
        Keyboard Keyboard = new Keyboard();
        ArrayList<Keyboard> keyboard = new ArrayList<Keyboard>();
        MongoClient mongoClient = MongoDBManager.conectionDB();
        MongoDatabase database = mongoClient.getDatabase("KeyboardStore");
        MongoCollection<Document> collection = database.getCollection("Keyboard");
        String[] titles = {"Id", "Trade Mark", "Type Keyboard", "Price"};
        String[] travelerString = new String[4];
        DefaultTableModel tableOfKeyboardT = new DefaultTableModel(null, titles);
        keyboardTable.setModel(tableOfKeyboardT);
        KeyboardController.loadFromDatabase(keyboard, database, "Keyboard");
        for (int i = 0; i < keyboard.size(); i++) {
            travelerString[0] = "" + keyboard.get(i).getId() + "";
            travelerString[1] = "" + keyboard.get(i).getTradeMark() + "";
            travelerString[2] = "" + keyboard.get(i).getKeyboardType() + "";
            travelerString[3] = "" + keyboard.get(i).getPrice() + "";

            tableOfKeyboardT.addRow(travelerString);
        }

        keyboardTable.setModel(tableOfKeyboardT);
        keyboardTable.setDefaultEditor(Object.class, null);
    }//GEN-LAST:event_findAllButtonActionPerformed

    private void ingressIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingressIdActionPerformed

    }//GEN-LAST:event_ingressIdActionPerformed

    private void ingressIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ingressIdKeyTyped
        int validNumber = evt.getKeyChar();
        boolean number = validNumber >= 48 && validNumber <= 57;
        if (!number) {
            evt.consume();
        }
        if (ingressId.getText().length() >= 5) {
            evt.consume();
        }
    }//GEN-LAST:event_ingressIdKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmFindKeyboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmFindKeyboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmFindKeyboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmFindKeyboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmFindKeyboard().setVisible(true);
            }
        });
    }

    public void cleanPanel() {
        keyboardMarkTF.setText("");
        keyboardTypeTF.setText("");
        PriceTF.setText("");
        ingressId.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField PriceTF;
    private javax.swing.JButton backButton;
    private javax.swing.JButton findAllButton;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField ingressId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keyboardMarkTF;
    private javax.swing.JTable keyboardTable;
    private javax.swing.JTextField keyboardTypeTF;
    // End of variables declaration//GEN-END:variables
}
